name: All build and testing
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '16'
  JDK_VERSION: '17'

jobs:
  Backend-Tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JDK-${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'

      - name: Build Backend
        working-directory: backend
        run: mvn compile test-compile

      - name: Run Backend Tests
        working-directory: backend
        run: mvn test

      - name: Build Adoc PDF
        uses: tonynv/asciidoctor-action@v2
        with:
          program: "asciidoctor-pdf -a allow-uri-read -D . backend/src/main/asciidoc/index.adoc"

      - name: Upload Adoc PDF Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docs.pdf
          path: index.pdf

      - name: Upload Allure Reports Artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: backend-allure-results
          path: backend/target/allure-results

  Frontend-Tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js (v${{ env.NODE_VERSION }})
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: client
        run: npm install

      - name: Run Frontend Tests
        working-directory: client
        run: npm test

      - name: Upload Allure Reports Artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: client-allure-results
          path: client/allure-results

  End-To-End-Tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    needs: [ Backend-Tests, Frontend-Tests ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js (v${{ env.NODE_VERSION }})
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: client
        run: npm install

      - name: Setup JDK-${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'

      - name: Start Backend
        working-directory: backend
        run: mvn spring-boot:run &

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          working-directory: client
          start: npm start
          wait-on: 'http://localhost:5000/recipes, http://localhost:3000'
          wait-on-timeout: 120
          headless: true

      - name: Run Playwirght Tests
        working-directory: client
        run: npx playwright test src/tests/e2e/* --workers=1 --config=src/tests/e2e/playwright.config.ts

      - name: Upload Allure Reports Artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e-allure-results
          path: client/allure-results

  Selenide-Tests:
    name: Selenide Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: [ chrome, firefox ]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    needs: [ Backend-Tests, Frontend-Tests ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js (v${{ env.NODE_VERSION }})
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: client
        run: npm install

      - name: Setup JDK-${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}
          cache: 'maven'

      - name: Start Backend
        working-directory: backend
        run: mvn spring-boot:run &

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          working-directory: client
          start: npm start
          wait-on: 'http://localhost:5000/recipes, http://localhost:3000'
          wait-on-timeout: 120
          headless: true

      - name: Start Selenoid
        uses: Xotabu4/selenoid-github-action@v2
        with:
          selenoid-start-arguments: |
            --args "-timeout 200s" --browsers="chrome;firefox"

      - name: Run Selenide Tests
        working-directory: selenide
        run: gradle test -Dselenide.browser=${{ matrix.browser }}

      - name: Upload Allure Reports Artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: selenide-allure-results-${{ matrix.browser }}
          path: selenide/build/allure-results

  Deploy-app:
    name: Build Docker image and deploy to Heroku
    runs-on: ubuntu-latest
    needs: [ Backend-Tests, Frontend-Tests, End-To-End-Tests, Selenide-Tests ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      HEROKU_APP_NAME: romanenko-recipes-app
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Restore Docker layers from cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Heroku Container Registry
        uses: docker/login-action@v1
        with:
          registry: registry.heroku.com
          username: ${{ secrets.HEROKU_USERNAME }}
          password: ${{ secrets.HEROKU_API_KEY }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/itmo-testing:latest
            registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move cache (see https://github.com/docker/build-push-action/issues/252)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Print image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  Upload-Allure-Report:
    name: Upload Allure Report
    runs-on: ubuntu-latest
    if: always()

    needs: [ Backend-Tests, Frontend-Tests, End-To-End-Tests, Selenide-Tests ]
    steps:
      - name: Download client allure results
        uses: actions/download-artifact@v2
        with:
          name: client-allure-results
          path: allure-results

      - name: Download e2e allure results
        uses: actions/download-artifact@v2
        with:
          name: e2e-allure-results
          path: allure-results

      - name: Download selenide chrome allure results
        uses: actions/download-artifact@v2
        with:
          name: selenide-allure-results-chrome
          path: allure-results

      - name: Download selenide firefox allure results
        uses: actions/download-artifact@v2
        with:
          name: selenide-allure-results-firefox
          path: allure-results

      - name: Get Allure history
        uses: actions/checkout@v2
        continue-on-error: true
        with:
          ref: allure-reports-pages
          path: allure-reports-pages

      - name: Create allure report
        uses: simple-elf/allure-report-action@v1.5
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: allure-reports-pages
          allure_report: allure-report
          allure_history: allure-history

      - name: Deploy report to Github Pages
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: allure-reports-pages
          PUBLISH_DIR: allure-history

      - name: Post the link to the report
        uses: Sibz/github-status-action@v1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: 'Test report'
          state: 'success'
          sha: ${{ github.event.pull_request.head.sha }}
          target_url: https://dromanenko.github.io/itmo-testing/selenide/${{ github.run_number }}

      - name: Delete allure reports from artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            backend-allure-results
            client-allure-results
            e2e-allure-results
            test-results